@page "/compass"

<div class="container p-0 no-touch-scroll" style="max-height: 160px;"
    @ref="ShapeRef"
    @onmousedown="StartRotation"
    @onmousemove="OnMouseMove"
    @onmouseup="StopRotation"
    @ontouchstart="StartRotationTouch"
    @ontouchmove="OnTouchMove"
    @ontouchend="StopRotationTouch"
    @ontouchcancel="StopRotationTouch">
    <div class="base-content" style="max-height: 160px;">
        <!-- Your main content here -->
        <img src="/Resources/compass-background.svg" class="full-width-img" style="max-height: 160px;" draggable="false"/>
    </div>
    
    <div class="overlay" style="max-height: 160px; ">
        <img src="/Resources/compass-arrow.svg" class="full-width-img" style="max-height: 160px; transform: rotate(@rotationString);" draggable="false"/>
    </div>
    
    <div class="overlay" style="max-height: 160px;">
        <img src="/Resources/compass-grid-line.svg" class="full-width-img" style="max-height: 160px;" draggable="false"/>
    </div>
</div>


@* 
<svg
    width="100"
    height="100"
    viewBox="0 0 100 100"
    @ref="ShapeRef"
    @onmousedown="StartRotation"
    @onmousemove="OnMouseMove"
    @onmouseup="StopRotation"
    @ontouchstart="StartRotationTouch"
    @ontouchmove="OnTouchMove"
    @ontouchend="StopRotationTouch"
    @ontouchcancel="StopRotationTouch"
    style="cursor: pointer;"
    id="svg1"
    xml:space="preserve"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:svg="http://www.w3.org/2000/svg"
    class="no-touch-scroll"> <defs
        id="defs1" />
        <g >
         <g
             id="layer1"><path transform="@rotateTransform"
                style="fill:#000000;stroke:#000000;stroke-width:5;stroke-dasharray:none;stroke-opacity:1"
                d="M 75,70
                    50,22.5
                    25,70
                    50,60 Z"
                id="path3" /></g><g
             id="layer2"><circle
                style="fill:none;stroke:#000000;stroke-width:3;stroke-dasharray:none;stroke-opacity:1"
                id="path2"
                cx="50"
                cy="50"
                r="42.5" /></g>
    </g>
</svg> *@

@code {
    private ElementReference ShapeRef;
    private bool isRotating = false;
    private string rotateTransform => $"rotate({angle}, 50, 50)";
    private double angle = 0;
    private string rotationString => $"{angle}deg";

    [Parameter]
    public double WindDirection { get; set; }

    [Parameter]
    public EventCallback<double> WindDirectionChanged { get; set; }

    private async void StartRotation(MouseEventArgs e)
    {
        isRotating = true;
    }

    private async void StopRotation(MouseEventArgs e)
    {
        isRotating = false;
    }

    private async void StartRotationTouch(TouchEventArgs e)
    {
        isRotating = true;
    }

    private async void StopRotationTouch(TouchEventArgs e)
    {
        isRotating = false;
    }

    public async void UpdateRender(double windDirection)
    {
        angle = (windDirection * 30d) + 180d;
        StateHasChanged();
    }

    private async void OnMouseMove(MouseEventArgs e)
    {
        if (!isRotating) return;
        await Rotate(e.ClientX, e.ClientY);
    }

    private async void OnTouchMove(TouchEventArgs e)
    {
        if (!isRotating || e.Touches.Count() == 0) return;
        await Rotate(e.Touches[0].ClientX, e.Touches[0].ClientY);
    }

    private async Task Rotate(double clientX, double clientY)
    {
        var rect = await JS.InvokeAsync<DomRect>("getElementRect", ShapeRef);
        var centerX = rect.Left + rect.Width / 2;
        var centerY = rect.Top + rect.Height / 2;

        var dx = clientX - centerX;
        var dy = clientY - centerY;

        angle = Math.Atan2(dy, dx) * (180 / Math.PI) + 90d;

        var adjAngle = angle - 180d;
        while (adjAngle < 0d)
        {
            adjAngle += 360d;
        }

        WindDirection = System.Math.Round(adjAngle / 30d, 1);

        await WindDirectionChanged.InvokeAsync(WindDirection);
        StateHasChanged();
    }

    [Inject] private IJSRuntime JS { get; set; }

    public class DomRect
    {
        public double Left { get; set; }
        public double Top { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
    }
}