@using PocketCaddy.Components
@using System.Text.Json
@using PocketCaddy.Model
@using PocketCaddy.Services

@page "/"

@inject PocketCaddyStateService AppStateService

<PageTitle>Home</PageTitle>
<div class="d-flex flex-column h-100" style="min-width: 375px; max-width: 462px;">
    <!-- INPUTS -->
    <div class="p-2 mb-2 border">
        <div class="hstack gap-3 mb-1">
            <label class="form-label mb-0" style="white-space: nowrap; width: 75px;">Club:</label>
            <select class="form-select flex-fill" @bind="SelectedClubName" @bind:after="ClubChanged">
                @foreach (var club in Clubs)
                {
                    <option value="@club.Name">@club.Name</option>
                }
            </select>
            <button class="btn btn-sm btn-outline-danger" title="Reset" @onclick="ResetInputs">⟲</button>
        </div>

        <div class="row">
            <!-- Compass (Fixed Width to Prevent Overhang) -->
            <div class="col-4 p-0 d-flex justify-content-center align-items-center">
                <div class="d-flex justify-content-center align-items-center" style="width: 100%; max-width: 120px; height: 120px;">
                    <Compass @ref="CompassControl"
                    WindDirection="@WindDirection"
                    WindDirectionChanged="@SetWindDirection" />
                </div>
            </div>
            <div class="col-8">
                <div class="mb-1">
                    @InputControl("From", nameof(WindDirection), WindDirection, DecrementWindDirection, IncrementWindDirection, EventCallback.Factory.Create<double>(this, (double v) => WindDirection = v))
                </div>
                <div class="mb-1">
                    @InputControl("MPH", nameof(WindSpeed), WindSpeed, DecrementWindSpeed, IncrementWindSpeed, EventCallback.Factory.Create<double>(this, (double v) => WindSpeed = v))
                </div>
                <div class="mb-1">
                    @InputControl("YDS", nameof(Yards), Yards, DecrementYards, IncrementYards, EventCallback.Factory.Create<double>(this, (double v) => Yards = v))
                </div>
                <div class="mb-1">
                    <div class="d-flex align-items-center gap-2">
                        <label class="form-label mb-0" style="width: 75px;">E%:</label>
                        <div class="input-group" style="max-width: 250px; min-width: 80px;">
                            <button class="btn btn-outline-secondary" @onclick="DecrementElevation">-</button>
                            <input class="form-control text-center no-spinner"
                            type="text"
                            value="@ElevationString"
                            @oninput="HandleElevationInput"
                            @onblur="HandleElevationBlur" />
                            <button class="btn btn-outline-secondary" @onclick="IncrementElevation">+</button>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>

    <!-- OUTPUTS: fills remaining space and scrolls internally -->
    <div class="border flex-grow-1 p-2 overflow-auto">
        <div class="card-body h-100 d-flex p-0 m-0">
            <!-- Table 1 -->
            <div class="flex-fill overflow-auto me-2">
                <table class="table table-bordered table-sm synced-table w-100">
                    <thead class="sticky-top bg-light">
                        <tr>
                            <th class="col-a">Yards  </th>
                            <th class="col-b">Pull  </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in PullValues)
                        {
                            <tr>
                                <td style="background-color: @row.Background;">@row.Yards</td>
                                <td style="background-color: @row.Background;">@row.Pull</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Table 2 -->
            <div class="flex-fill overflow-auto">
                <table class="table table-bordered table-sm synced-table w-100">
                    <thead class="sticky-top bg-light">
                        <tr>
                            <th class="col-a">SV  </th>
                            <th class="col-b">RO  </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in ROValues)
                        {
                            <tr>
                                <td>@row.SV</td>
                                <td>@row.RO</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

</div>

@functions {
    RenderFragment InputControl(string label, string key, double data, Action decrement, Action increment, EventCallback<double> dataChanged) => __builder =>
    {
        <div class="d-flex align-items-center gap-2">
            <label class="form-label mb-0" style="width: 75px;">@label:</label>
            <div class="input-group" style="max-width: 250px; min-width: 80px;">
                <button class="btn btn-outline-secondary" @onclick="decrement">-</button>
                <input class="form-control text-center no-spinner"
                type="number"
                @bind="data"
                @bind:event="oninput"
                @bind:after="() => dataChanged.InvokeAsync(data)" />
                <button class="btn btn-outline-secondary" @onclick="increment">+</button>
            </div>
        </div>
    };
}


@code {
    private Compass? CompassControl;

    UserData Data = new();
    string SelectedClubName = string.Empty;

    ClubData? GetSelectedClub()
    {
        var rtn = Clubs.FirstOrDefault(w => w.Name == SelectedClubName); 
        return rtn;
    }

    List<ClubData> Clubs = new();

    string ElevationString = "0";
    string LastValidElevationString = "0";

    void HandleElevationInput(ChangeEventArgs e)
    {
        var val = e.Value?.ToString() ?? "";
        if (val == "-")
        {
            Data!.ShotInfo.Elevation = 0;
            ElevationString = val;
            LastValidElevationString = val;
            UpdateData();
        }
        else if (double.TryParse(val, out var ele))
        {
            Data!.ShotInfo.Elevation = ele;
            ElevationString = val;
            LastValidElevationString = val;
            UpdateData();
        }
        else
        {
            ElevationString = LastValidElevationString;
        }
    }

    private void HandleElevationBlur(FocusEventArgs e)
    {
        // When leaving the field, validate and normalize the input
        if (string.IsNullOrWhiteSpace(ElevationString) || ElevationString == "-")
        {
            ElevationString = "0";
        }
        else if (double.TryParse(ElevationString, out var parsedValue))
        {
            // For display purposes, keep "-0" if that's what was entered
            if (ElevationString == "-0" || ElevationString == "-0.")
            {
                ElevationString = "-0";
                Data!.ShotInfo.Elevation = 0.0;
            }
            else
            {
                Data!.ShotInfo.Elevation = parsedValue;
            }
            UpdateData();
        }
        else
        {
            ElevationString = LastValidElevationString;
        }

        LastValidElevationString = ElevationString;
        StateHasChanged();
    }

    double WindDirection
    {
        get => Data!.ShotInfo.WindDirection;
        set
        {
            if (Data!.ShotInfo.WindDirection != value)
            {
                Data!.ShotInfo.WindDirection = value;
                UpdateData();
                CompassControl?.UpdateRender(Data!.ShotInfo.WindDirection);
            }
        }
    }

    double WindSpeed
    {
        get => Data!.ShotInfo.WindSpeed;
        set
        {
            if (Data!.ShotInfo.WindSpeed != value)
            {
                Data!.ShotInfo.WindSpeed = value;
                UpdateData();
            }
        }
    }

    double Yards
    {
        get => Data!.ShotInfo.Yards;
        set
        {
            if (Data!.ShotInfo.Yards != value)
            {
                Data!.ShotInfo.Yards = value;
                UpdateData();
            }
        }
    }

    double Elevation
    {
        get => Data!.ShotInfo.Elevation;
        set
        {
            if (Data!.ShotInfo.Elevation != value)
            {
                Data!.ShotInfo.Elevation = value;
                ElevationString = value.ToString("0.0#");
                UpdateData();
            }
        }
    }

    void ClubChanged()
    {
        var club = GetSelectedClub();
        Data.ShotInfo.ClubType = club.Type;

        var targetYards = club.Type == 4 ? 30d : club.MaxRange - 5;
        var newYardage = System.Math.Round(System.Math.Floor((targetYards) / 5 + 1e-6) * 5 + 5, 0);
        SetYardage(newYardage);

        // save data
        Data.ShotInfo.Yards = Yards;
    }

    void ResetInputs()
    {
        var club = GetSelectedClub();
        Data.ShotInfo.ClubType = club.Type;
        var targetYards = club.Type == 4 ? 30d : club.MaxRange - 5;
        var newYardage = System.Math.Round(System.Math.Floor((targetYards) / 5 + 1e-6) * 5 + 5, 0);
        SetYardage(newYardage);
        WindDirection = 6;
        WindSpeed = 4d;
        Elevation = 0d;

        // save data
        Data.ShotInfo.Yards = Yards;
        Data.ShotInfo.WindSpeed = WindSpeed;
        Data.ShotInfo.Elevation = Elevation;
        Data.ShotInfo.WindDirection = WindDirection;
    }

    void IncrementWindDirection()
    {
        var newWind = System.Math.Round(System.Math.Floor(WindDirection * 10d + 1e-6) * 0.1 + 0.1, 4);
        while (newWind < 0d)
            newWind += 12d;
        while (newWind > 12d)
            newWind -= 12d;
        SetWindDirection(newWind);
    }

    void DecrementWindDirection()
    {
        var newWind = System.Math.Round(System.Math.Ceiling(WindDirection * 10d - 1e-6) * 0.1 - 0.1, 4);
        while (newWind < 0d)
            newWind += 12d;
        while (newWind > 12d)
            newWind -= 12d;
        SetWindDirection(newWind);
    }

    void IncrementWindSpeed()
    {
        var newWind = System.Math.Round(System.Math.Floor(WindSpeed * 10d + 1e-6) * 0.1 + 0.1, 4);
        SetWindSpeed(newWind);
    }
    void DecrementWindSpeed()
    {
        var newWind = System.Math.Round(System.Math.Ceiling(WindSpeed * 10d - 1e-6) * 0.1 - 0.1, 4);
        SetWindSpeed(newWind);
    }

    public void SetWindSpeed(double value)
    {
        if (value < 0d)
            value = 0d;
        WindSpeed = value;
        Data.ShotInfo.WindSpeed = value;
    }

    void IncrementYards()
    {
        var newYardage = System.Math.Round(System.Math.Floor(Yards / 5 + 1e-6) * 5 + 5, 0);
        SetYardage(newYardage);
    }

    void DecrementYards()
    {
        var newYardage = System.Math.Round(System.Math.Ceiling(Yards / 5 - 1e-5) * 5 - 5, 0);
        SetYardage(newYardage);
    }

    public void SetYardage(double value)
    {
        if (value < 10d)
            value = 10d;
        Yards = value;
        Data.ShotInfo.Yards = value;
    }

    void IncrementElevation()
    {
        var newElevation = System.Math.Round(System.Math.Floor(Elevation * 2d + 1e-6) * 0.5 + 0.5, 4);
        SetElevation(newElevation);
    }

    void DecrementElevation()
    {
        var newElevation = System.Math.Round(System.Math.Ceiling(Elevation * 2d - 1e-6) * 0.5 - 0.5, 4);
        SetElevation(newElevation);
    }

    public void SetElevation(double value)
    {
        Elevation = value;
        Data!.ShotInfo.Elevation = value;
    }

    private void SetWindDirection(double newAngle)
    {
        WindDirection = newAngle;
        Data.ShotInfo.WindDirection = newAngle;
        CompassControl?.UpdateRender(newAngle);
    }

    async void UpdateData()
    {
        if (GetSelectedClub() is null)
            return;
        await AppStateService.SaveStateAsync(Data);
        UpdatePullValues();
        UpdateROValues();
        StateHasChanged();
    }


    double GetWindY() => System.Math.Sin(((WindDirection - 3d) * 30d) / 180d * System.Math.PI);


    List<(double Yards, double Pull, string Background)> PullValues = new();

    void UpdatePullValues()
    {
        var yds = Yards;
        var yards = new[] {yds + 5, yds + 4, yds + 3, yds + 2, yds + 1, yds, yds - 1, yds - 2, yds - 3, yds - 4, yds - 5};
        var rtn = new List<(double Yards, double Pull, string Background)>();
        foreach (var yd in yards)
        {
            var color = "#FFFFFF";
            if (System.Math.Abs(yds - yd) <= 1e-6)
                color = "#9fc5e8";
            else if (System.Math.Abs(yds - yd) <= 3 + 1e-6)
                color = "#cfe2f3";
            
            // current club
            var cc = GetSelectedClub();
            
            var pull = cc.ComputePull(Elevation, WindDirection, WindSpeed, yd, cc.Type, Data!.Settings.Pull);
            rtn.Add((System.Math.Round(yd, 4), System.Math.Round(pull, 2), color));
        }

        PullValues = rtn;
    }

    List<(double SV, double RO)> ROValues = new();

    void UpdateROValues()
    {
        var cc = GetSelectedClub();        
        var sv = new[] { 1d, 1.25d, 1.5d, 1.75d, 2d, 2.25, 2.5, 2.75, 3, 3.25, 3.5, 3.75, 4, 4.25, 4.5, 4.75, 5, 5.5, 6.0, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10 };
        var rtn = new List<(double, double)>();

        var hwMult = Data!.Settings.Rollout.GetHeadWind(cc.Type);
        var twMult = Data!.Settings.Rollout.GetTailWind(cc.Type);
        foreach (var item in sv)
        {
            var finalRO = cc.ComputeRollout(hwMult, twMult, WindDirection, WindSpeed, item);
            rtn.Add((item, System.Math.Round(finalRO, 2)));
        }

        ROValues = rtn;
    }



    protected async override Task OnInitializedAsync()
    {
        Data = await AppStateService.GetOrCreateStateAsync();
        Clubs = Data.Bag.GetClubs();        
        SelectedClubName = Clubs.ElementAt(Data.ShotInfo.ClubType).Name;
  
        ElevationString = Data.ShotInfo.Elevation.ToString();
        UpdatePullValues();
        UpdateROValues();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // Only run once after initial render
        {
            CompassControl?.UpdateRender(Data.ShotInfo.WindDirection);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
