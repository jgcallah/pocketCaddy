@using PocketCaddy.Components
@page "/"

<PageTitle>Home</PageTitle>
<div class="d-flex flex-column h-100">
    <!-- INPUTS -->
    <div class="p-2 mb-2 border">
        <div class="hstack gap-3 mb-1">
            <label class="form-label mb-0" style="white-space: nowrap; width: 100px;">Club:</label>
            <select class="form-select flex-fill"  @bind="SelectedClubName" @bind:after="ResetInputs">
                @foreach (var club in Clubs)
                {
                    <option value="@club.Name">@club.Name</option>
                }
            </select>
            <button class="btn btn-sm btn-outline-danger" title="Reset" @onclick="ResetInputs">⟲</button>
        </div>
        <div class="row">
            <div class="col-8">
                <div class="mb-1">
                    @InputControl("From", nameof(WindDirection), WindDirection, DecrementWindDirection, IncrementWindDirection, EventCallback.Factory.Create<double>(this, (double v) => WindDirection = v))
                </div>
                <div class="mb-1">
                    @InputControl("MPH", nameof(WindSpeed), WindSpeed, DecrementWindSpeed, IncrementWindSpeed, EventCallback.Factory.Create<double>(this, (double v) => WindSpeed = v))
                </div>
                <div class="mb-1">
                    @InputControl("YDS", nameof(Yards), Yards, DecrementYards, IncrementYards, EventCallback.Factory.Create<double>(this, (double v) => Yards = v))
                </div>
                <div class="mb-1">
                    @InputControl("E%", nameof(Elevation), Elevation, DecrementElevation, IncrementElevation, EventCallback.Factory.Create<double>(this, (double v) => Elevation = v))
                </div>
            </div>
            <!-- WIND DIRECTION -->
            <div class="col-4">
                <div class="d-flex justify-content-center">
                    <Compass @ref="CompassControl" WindDirection="@WindDirection" WindDirectionChanged="@SetWindDirection" />
                </div>
            </div>
        </div>
    </div>


    <!-- OUTPUTS: fills remaining space and scrolls internally -->
    <div class="border flex-grow-1 p-2 overflow-auto">
        <div class="card-body h-100 d-flex gap-2">
            <!-- Table 1 -->
            <div class="flex-fill overflow-auto">
                <table class="table table-bordered table-sm synced-table" style="width: 150px;">
                    <thead class="sticky-top bg-light">
                        <tr>
                            <th class="col-a">Yards</th>
                            <th class="col-b">Pull</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in PullValues)
                        {
                            <tr>
                                <td>@row.Yards</td>
                                <td>@row.Pull</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Table 2 -->
            <div class="flex-fill overflow-auto">
                <table class="table table-bordered table-sm synced-table mb-0" style="width: 150px;">
                    <thead class="sticky-top bg-light">
                        <tr>
                            <th class="col-a">SV</th>
                            <th class="col-b">RO</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in ROValues)
                        {
                            <tr>
                                <td>@row.SV</td>
                                <td>@row.RO</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@functions {
    RenderFragment InputControl(string label, string key, double data, Action decrement, Action increment, EventCallback<double> dataChanged) => __builder =>
    {
        <div class="d-flex align-items-center gap-2">
            <label class="form-label mb-0" style="width: 100px;">@label:</label>
            <div class="input-group" style="max-width: 250px; min-width: 80px;">
                <button class="btn btn-outline-secondary" @onclick="decrement">-</button>
                <input class="form-control text-center no-spinner"
                    type="number"
                    @bind="data"
                    @bind:event="oninput"
                    @bind:after="() => dataChanged.InvokeAsync(data)" />
                <button class="btn btn-outline-secondary" @onclick="increment">+</button>
            </div>
        </div>
    };
}


@code {
    private Compass? CompassControl;

    ClubData Driver = new();
    ClubData Wood = new();
    ClubData LongIron = new();
    ClubData ShortIron = new();
    ClubData Wedge = new();
    string SelectedClubName = string.Empty;

    ClubData GetSelectedClub()
    {
        var rtn = Clubs.First(w => w.Name == SelectedClubName); 
        return rtn;
    }

    List<ClubData> Clubs = new();

    protected override void OnInitialized()
    {
        Driver = ClubData.Mammoth(8);
        Wood = ClubData.Vortex(7);
        LongIron = ClubData.Eclipse(10);
        ShortIron = ClubData.Thunder(10);
        Wedge = ClubData.Torque(8);

        Clubs = new List<ClubData>()
        {
            Driver, Wood, LongIron, ShortIron, Wedge
        };
        SelectedClubName = LongIron.Name;

        ResetInputs();
    }


    double _windDirection = 6d;
    double _windSpeed = 6d;
    double _yards = 6d;
    double _elevation = 6d;

    double WindDirection
    {
        get => _windDirection;
        set
        {
            if (_windDirection != value)
            {
                _windDirection = value;
                UpdateData();
                CompassControl?.UpdateRender(_windDirection);
            }
        }
    }

    double WindSpeed
    {
        get => _windSpeed;
        set
        {
            if (_windSpeed != value)
            {
                _windSpeed = value;
                UpdateData();
            }
        }
    }

    double Yards
    {
        get => _yards;
        set
        {
            if (_yards != value)
            {
                _yards = value;
                UpdateData();
            }
        }
    }

    double Elevation
    {
        get => _elevation;
        set
        {
            if (_elevation != value)
            {
                _elevation = value;
                UpdateData();
            }
        }
    }

    void ResetInputs()
    {
        var club = GetSelectedClub();
        Yards = System.Math.Round(club.MaxRange - 5, 0);
        WindDirection = 6;
        WindSpeed = 4d;
        Elevation = 0d;
    }

    void IncrementWindDirection()
    {
        var newWind = System.Math.Round(System.Math.Floor(WindDirection * 10d + 1e-6) * 0.1 + 0.1, 4);
        while (newWind < 0d)
            newWind += 12d;
        while (newWind > 12d)
            newWind -= 12d;
        SetWindDirection(newWind);
    }

    void DecrementWindDirection()
    {
        var newWind = System.Math.Round(System.Math.Ceiling(WindDirection * 10d - 1e-6) * 0.1 - 0.1, 4);
        while (newWind < 0d)
            newWind += 12d;
        while (newWind > 12d)
            newWind -= 12d;
        SetWindDirection(newWind);
    }

    void IncrementWindSpeed()
    {
        var newWind = System.Math.Round(System.Math.Floor(WindSpeed * 10d + 1e-6) * 0.1 + 0.1, 4);
        SetWindSpeed(newWind);
    }
    void DecrementWindSpeed()
    {
        var newWind = System.Math.Round(System.Math.Ceiling(WindSpeed * 10d - 1e-6) * 0.1 - 0.1, 4);
        SetWindSpeed(newWind);
    }

    public void SetWindSpeed(double value)
    {
        if (value < 0d)
            value = 0d;
        WindSpeed = value;
    }

    void IncrementYards()
    {
        var newYardage = System.Math.Round(System.Math.Floor(Yards / 5 + 1e-6) * 5 + 5, 0);
        SetYardage(newYardage);
    }

    void DecrementYards()
    {
        var newYardage = System.Math.Round(System.Math.Ceiling(Yards / 5 - 1e-5) * 5 - 5, 0);
        SetYardage(newYardage);
    }

    public void SetYardage(double value)
    {
        if (value < 10d)
            value = 10d;
        Yards = value;
    }

    void IncrementElevation()
    {
        var newElevation = System.Math.Round(System.Math.Floor(Elevation * 2d + 1e-6) * 0.5 + 0.5, 4);
        SetElevation(newElevation);
    }

    void DecrementElevation()
    {
        var newElevation = System.Math.Round(System.Math.Ceiling(Elevation * 2d - 1e-6) * 0.5 - 0.5, 4);
        SetElevation(newElevation);
    }

    public void SetElevation(double value)
    {
        Elevation = value;
    }

    private void SetWindDirection(double newAngle)
    {
        WindDirection = newAngle;
        CompassControl?.UpdateRender(newAngle);
    }

    void UpdateData()
    {
        UpdatePullValues();
        UpdateROValues();
    }


    double GetWindY() => System.Math.Sin(((WindDirection - 3d) * 30d) / 180d * System.Math.PI);


    List<(double Yards, double Pull)> PullValues = new();

    void UpdatePullValues()
    {
        var yds = Yards;
        var yards = new[] {yds + 5, yds + 4, yds + 3, yds + 2, yds + 1, yds, yds - 1, yds - 1, yds - 3, yds - 4, yds - 5};
        var rtn = new List<(double Yards, double Pull)>();
        foreach (var yd in yards)
        {
            var pull = ComputePull(yd);
            rtn.Add((yd, pull));
        }

        PullValues = rtn;
    }

    public double ComputePull(double yards)
    {
        // current club
        var cc = GetSelectedClub();

        // set the range ratio
        var rr = yards / cc.MaxRange;
        if (cc.Type == 4) // for wedges, we modify this again. 
            rr *= rr;

        // wind speed
        var ws = WindSpeed;

        // base pull
        var bp = rr * cc.MagicNumber * ws;

        // elevation factor
        var ef = 1 - Elevation / 100d;

        // wind factor
        var wy = GetWindY();
        var wf = 1 - wy * ws * 0.01;

        // effective pull
        var ep = bp * ef * wf;

        return System.Math.Round(ep, 2);
    }

    List<(double SV, double RO)> ROValues = new();

    void UpdateROValues()
    {
        var cc = GetSelectedClub();
        var sv = new[] { 2d, 2.25, 2.5, 2.75, 3, 3.25, 3.5, 3.75, 4, 4.25, 4.5, 4.75, 5, 5.5, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10 };
        var wy = GetWindY();
        var wi = WindSpeed;
        var svClub = cc.ShotView;
        var rtn = new List<(double, double)>();

        foreach (var item in sv)
        {
            var baseRO = item / svClub;
            var adjustment = wy > 0d
                ? 0.07
                : 0.05;

            var finalRO = baseRO * (1 + wy * adjustment * wi);
            rtn.Add((item, System.Math.Round(finalRO, 2)));
        }

        ROValues = rtn;
    }
}
